stages:
  - build
  - lint
  - test

default:
  tags:
    - linux

build-backend:
  stage: build
  image: rust:alpine
  script:
    - apk update && apk add --no-cache musl-dev
    - cd backend
    - cargo build

build-frontend:
  stage: build
  image: node:alpine
  script:
    - cd frontend
    - npm install
    - npm run build

build-prod-image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    CURRENT_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    BRANCH_IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CURRENT_IMAGE_TAG -t $BRANCH_IMAGE_TAG -f docker/prod/Dockerfile .
    - docker push $CURRENT_IMAGE_TAG
    - docker push $BRANCH_IMAGE_TAG

format-backend:
  stage: lint
  image: rust:alpine
  script:
    - cd backend
    - rustup component add rustfmt
    - cargo fmt --check

clippy-backend:
  stage: lint
  image: rust:alpine
  script:
    - apk update && apk add --no-cache musl-dev
    - cd backend
    - rustup component add clippy
    - cargo clippy -- -Dwarnings

format-frontend:
  stage: lint
  image: node:alpine
  script:
    - cd frontend
    - npm install
    - npm run format:check

lint-frontend:
  stage: lint
  image: node:alpine
  script:
    - cd frontend
    - npm install
    - npm run lint:check

test-backend:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  variables:
    FF_NETWORK_PER_BUILD: "true"
  script:
    - apk update && apk add --no-cache musl-dev cargo
    - docker build -t app -f docker/prod/Dockerfile .
    - docker run --detach -p 0.0.0.0:8601:8601 app
    - cd backend
    - HOSTNAME=docker cargo test
